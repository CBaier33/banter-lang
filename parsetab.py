
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocCOMP_OPBE COMMA COMP_OP DIVIDE ELSE FALSE GOTO IF INSTRUCTION LET LP MINUS MNEUMONIC NUMBER PLUS RETURN RP STRING THEN TIMES TRUEprogram : statement\n               | statement programstatement : let_statement\n                 | if_statement\n                 | if_else_statement\n                 | return_statement\n                 | goto_statementlet_statement : LET MNEUMONIC BE arithmetic_expressionif_statement : IF comparison COMMA THEN blockif_else_statement : IF comparison COMMA THEN block ELSE blockreturn_statement : RETURN MNEUMONIC\n                        | RETURN NUMBER\n                        | RETURN STRINGgoto_statement : GOTO INSTRUCTION NUMBERblock : statement\n             | statement blockarithmetic_expression : term\n                             | arithmetic_expression PLUS term\n                             | arithmetic_expression MINUS termterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : MNEUMONIC\n              | NUMBER\n              | LP arithmetic_expression RPcomparison : arithmetic_expression COMP_OP arithmetic_expression'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,16,17,18,19,21,22,23,33,34,35,37,38,39,40,41,42,43,44,45,46,],[8,8,-3,-4,-5,-6,-7,-17,-20,-23,-24,-11,-12,-13,-14,-8,8,-18,-19,-21,-22,-25,-9,8,8,-16,-10,]),'IF':([0,2,3,4,5,6,7,16,17,18,19,21,22,23,33,34,35,37,38,39,40,41,42,43,44,45,46,],[9,9,-3,-4,-5,-6,-7,-17,-20,-23,-24,-11,-12,-13,-14,-8,9,-18,-19,-21,-22,-25,-9,9,9,-16,-10,]),'RETURN':([0,2,3,4,5,6,7,16,17,18,19,21,22,23,33,34,35,37,38,39,40,41,42,43,44,45,46,],[10,10,-3,-4,-5,-6,-7,-17,-20,-23,-24,-11,-12,-13,-14,-8,10,-18,-19,-21,-22,-25,-9,10,10,-16,-10,]),'GOTO':([0,2,3,4,5,6,7,16,17,18,19,21,22,23,33,34,35,37,38,39,40,41,42,43,44,45,46,],[11,11,-3,-4,-5,-6,-7,-17,-20,-23,-24,-11,-12,-13,-14,-8,11,-18,-19,-21,-22,-25,-9,11,11,-16,-10,]),'$end':([1,2,3,4,5,6,7,12,16,17,18,19,21,22,23,33,34,37,38,39,40,41,42,43,45,46,],[0,-1,-3,-4,-5,-6,-7,-2,-17,-20,-23,-24,-11,-12,-13,-14,-8,-18,-19,-21,-22,-25,-9,-15,-16,-10,]),'ELSE':([3,4,5,6,7,16,17,18,19,21,22,23,33,34,37,38,39,40,41,42,43,45,46,],[-3,-4,-5,-6,-7,-17,-20,-23,-24,-11,-12,-13,-14,-8,-18,-19,-21,-22,-25,44,-15,-16,-10,]),'MNEUMONIC':([8,9,10,20,25,27,28,29,30,31,],[13,18,21,18,18,18,18,18,18,18,]),'NUMBER':([9,10,20,24,25,27,28,29,30,31,],[19,22,19,33,19,19,19,19,19,19,]),'LP':([9,20,25,27,28,29,30,31,],[20,20,20,20,20,20,20,20,]),'STRING':([10,],[23,]),'INSTRUCTION':([11,],[24,]),'BE':([13,],[25,]),'COMMA':([14,16,17,18,19,36,37,38,39,40,41,],[26,-17,-20,-23,-24,-26,-18,-19,-21,-22,-25,]),'COMP_OP':([15,16,17,18,19,37,38,39,40,41,],[27,-17,-20,-23,-24,-18,-19,-21,-22,-25,]),'PLUS':([15,16,17,18,19,32,34,36,37,38,39,40,41,],[28,-17,-20,-23,-24,28,28,28,-18,-19,-21,-22,-25,]),'MINUS':([15,16,17,18,19,32,34,36,37,38,39,40,41,],[29,-17,-20,-23,-24,29,29,29,-18,-19,-21,-22,-25,]),'RP':([16,17,18,19,32,37,38,39,40,41,],[-17,-20,-23,-24,41,-18,-19,-21,-22,-25,]),'TIMES':([16,17,18,19,37,38,39,40,41,],[30,-20,-23,-24,30,30,-21,-22,-25,]),'DIVIDE':([16,17,18,19,37,38,39,40,41,],[31,-20,-23,-24,31,31,-21,-22,-25,]),'THEN':([26,],[35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,12,]),'statement':([0,2,35,43,44,],[2,2,43,43,43,]),'let_statement':([0,2,35,43,44,],[3,3,3,3,3,]),'if_statement':([0,2,35,43,44,],[4,4,4,4,4,]),'if_else_statement':([0,2,35,43,44,],[5,5,5,5,5,]),'return_statement':([0,2,35,43,44,],[6,6,6,6,6,]),'goto_statement':([0,2,35,43,44,],[7,7,7,7,7,]),'comparison':([9,],[14,]),'arithmetic_expression':([9,20,25,27,],[15,32,34,36,]),'term':([9,20,25,27,28,29,],[16,16,16,16,37,38,]),'factor':([9,20,25,27,28,29,30,31,],[17,17,17,17,17,17,39,40,]),'block':([35,43,44,],[42,45,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','sudolang.py',99),
  ('program -> statement program','program',2,'p_program','sudolang.py',100),
  ('statement -> let_statement','statement',1,'p_statement','sudolang.py',104),
  ('statement -> if_statement','statement',1,'p_statement','sudolang.py',105),
  ('statement -> if_else_statement','statement',1,'p_statement','sudolang.py',106),
  ('statement -> return_statement','statement',1,'p_statement','sudolang.py',107),
  ('statement -> goto_statement','statement',1,'p_statement','sudolang.py',108),
  ('let_statement -> LET MNEUMONIC BE arithmetic_expression','let_statement',4,'p_let_statement','sudolang.py',112),
  ('if_statement -> IF comparison COMMA THEN block','if_statement',5,'p_if_statement','sudolang.py',117),
  ('if_else_statement -> IF comparison COMMA THEN block ELSE block','if_else_statement',7,'p_if_else_statement','sudolang.py',122),
  ('return_statement -> RETURN MNEUMONIC','return_statement',2,'p_return_statement','sudolang.py',129),
  ('return_statement -> RETURN NUMBER','return_statement',2,'p_return_statement','sudolang.py',130),
  ('return_statement -> RETURN STRING','return_statement',2,'p_return_statement','sudolang.py',131),
  ('goto_statement -> GOTO INSTRUCTION NUMBER','goto_statement',3,'p_goto_statement','sudolang.py',140),
  ('block -> statement','block',1,'p_block','sudolang.py',144),
  ('block -> statement block','block',2,'p_block','sudolang.py',145),
  ('arithmetic_expression -> term','arithmetic_expression',1,'p_arithmetic_expression','sudolang.py',149),
  ('arithmetic_expression -> arithmetic_expression PLUS term','arithmetic_expression',3,'p_arithmetic_expression','sudolang.py',150),
  ('arithmetic_expression -> arithmetic_expression MINUS term','arithmetic_expression',3,'p_arithmetic_expression','sudolang.py',151),
  ('term -> factor','term',1,'p_term','sudolang.py',160),
  ('term -> term TIMES factor','term',3,'p_term','sudolang.py',161),
  ('term -> term DIVIDE factor','term',3,'p_term','sudolang.py',162),
  ('factor -> MNEUMONIC','factor',1,'p_factor','sudolang.py',171),
  ('factor -> NUMBER','factor',1,'p_factor','sudolang.py',172),
  ('factor -> LP arithmetic_expression RP','factor',3,'p_factor','sudolang.py',173),
  ('comparison -> arithmetic_expression COMP_OP arithmetic_expression','comparison',3,'p_comparison','sudolang.py',183),
]
