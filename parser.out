Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    GOTO
    INSTRUCTION

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     program -> expression
Rule 4     statement -> LET MNEUMONIC BE expression
Rule 5     statement -> IF comparison COMMA THEN statement
Rule 6     statement -> IF comparison COMMA THEN statement ELSE statement
Rule 7     statement -> RETURN expression
Rule 8     expression -> expression PLUS expression
Rule 9     expression -> expression MINUS expression
Rule 10    expression -> expression TIMES expression
Rule 11    expression -> expression DIVIDE expression
Rule 12    expression -> NUMBER
Rule 13    expression -> STRING
Rule 14    expression -> MNEUMONIC
Rule 15    expression -> BOOL
Rule 16    expression -> LP expression RP
Rule 17    expression -> comparison
Rule 18    comparison -> expression COMP_OP expression

Terminals, with rules where they appear

BE                   : 4
BOOL                 : 15
COMMA                : 5 6
COMP_OP              : 18
DIVIDE               : 11
ELSE                 : 6
GOTO                 : 
IF                   : 5 6
INSTRUCTION          : 
LET                  : 4
LP                   : 16
MINUS                : 9
MNEUMONIC            : 4 14
NUMBER               : 12
PLUS                 : 8
RETURN               : 7
RP                   : 16
STRING               : 13
THEN                 : 5 6
TIMES                : 10
error                : 

Nonterminals, with rules where they appear

comparison           : 5 6 17
expression           : 3 4 7 8 8 9 9 10 10 11 11 16 18 18
program              : 2 0
statement            : 1 2 5 6 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) program -> . expression
    (4) statement -> . LET MNEUMONIC BE expression
    (5) statement -> . IF comparison COMMA THEN statement
    (6) statement -> . IF comparison COMMA THEN statement ELSE statement
    (7) statement -> . RETURN expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    LET             shift and go to state 4
    IF              shift and go to state 6
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    program                        shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3
    comparison                     shift and go to state 7

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (4) statement -> . LET MNEUMONIC BE expression
    (5) statement -> . IF comparison COMMA THEN statement
    (6) statement -> . IF comparison COMMA THEN statement ELSE statement
    (7) statement -> . RETURN expression

    LET             shift and go to state 4
    IF              shift and go to state 6
    RETURN          shift and go to state 8

    statement                      shift and go to state 13

state 2

    (1) program -> statement .

    LET             reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    RETURN          reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)


state 3

    (3) program -> expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    LET             reduce using rule 3 (program -> expression .)
    IF              reduce using rule 3 (program -> expression .)
    RETURN          reduce using rule 3 (program -> expression .)
    $end            reduce using rule 3 (program -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18


state 4

    (4) statement -> LET . MNEUMONIC BE expression

    MNEUMONIC       shift and go to state 19


state 5

    (14) expression -> MNEUMONIC .

    PLUS            reduce using rule 14 (expression -> MNEUMONIC .)
    MINUS           reduce using rule 14 (expression -> MNEUMONIC .)
    TIMES           reduce using rule 14 (expression -> MNEUMONIC .)
    DIVIDE          reduce using rule 14 (expression -> MNEUMONIC .)
    COMP_OP         reduce using rule 14 (expression -> MNEUMONIC .)
    LET             reduce using rule 14 (expression -> MNEUMONIC .)
    IF              reduce using rule 14 (expression -> MNEUMONIC .)
    RETURN          reduce using rule 14 (expression -> MNEUMONIC .)
    $end            reduce using rule 14 (expression -> MNEUMONIC .)
    ELSE            reduce using rule 14 (expression -> MNEUMONIC .)
    RP              reduce using rule 14 (expression -> MNEUMONIC .)
    COMMA           reduce using rule 14 (expression -> MNEUMONIC .)


state 6

    (5) statement -> IF . comparison COMMA THEN statement
    (6) statement -> IF . comparison COMMA THEN statement ELSE statement
    (18) comparison -> . expression COMP_OP expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    comparison                     shift and go to state 20
    expression                     shift and go to state 21

state 7

    (17) expression -> comparison .

    PLUS            reduce using rule 17 (expression -> comparison .)
    MINUS           reduce using rule 17 (expression -> comparison .)
    TIMES           reduce using rule 17 (expression -> comparison .)
    DIVIDE          reduce using rule 17 (expression -> comparison .)
    COMP_OP         reduce using rule 17 (expression -> comparison .)
    LET             reduce using rule 17 (expression -> comparison .)
    IF              reduce using rule 17 (expression -> comparison .)
    RETURN          reduce using rule 17 (expression -> comparison .)
    $end            reduce using rule 17 (expression -> comparison .)
    ELSE            reduce using rule 17 (expression -> comparison .)
    RP              reduce using rule 17 (expression -> comparison .)
    COMMA           reduce using rule 17 (expression -> comparison .)


state 8

    (7) statement -> RETURN . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 22
    comparison                     shift and go to state 7

state 9

    (12) expression -> NUMBER .

    PLUS            reduce using rule 12 (expression -> NUMBER .)
    MINUS           reduce using rule 12 (expression -> NUMBER .)
    TIMES           reduce using rule 12 (expression -> NUMBER .)
    DIVIDE          reduce using rule 12 (expression -> NUMBER .)
    COMP_OP         reduce using rule 12 (expression -> NUMBER .)
    LET             reduce using rule 12 (expression -> NUMBER .)
    IF              reduce using rule 12 (expression -> NUMBER .)
    RETURN          reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    ELSE            reduce using rule 12 (expression -> NUMBER .)
    RP              reduce using rule 12 (expression -> NUMBER .)
    COMMA           reduce using rule 12 (expression -> NUMBER .)


state 10

    (13) expression -> STRING .

    PLUS            reduce using rule 13 (expression -> STRING .)
    MINUS           reduce using rule 13 (expression -> STRING .)
    TIMES           reduce using rule 13 (expression -> STRING .)
    DIVIDE          reduce using rule 13 (expression -> STRING .)
    COMP_OP         reduce using rule 13 (expression -> STRING .)
    LET             reduce using rule 13 (expression -> STRING .)
    IF              reduce using rule 13 (expression -> STRING .)
    RETURN          reduce using rule 13 (expression -> STRING .)
    $end            reduce using rule 13 (expression -> STRING .)
    ELSE            reduce using rule 13 (expression -> STRING .)
    RP              reduce using rule 13 (expression -> STRING .)
    COMMA           reduce using rule 13 (expression -> STRING .)


state 11

    (15) expression -> BOOL .

    PLUS            reduce using rule 15 (expression -> BOOL .)
    MINUS           reduce using rule 15 (expression -> BOOL .)
    TIMES           reduce using rule 15 (expression -> BOOL .)
    DIVIDE          reduce using rule 15 (expression -> BOOL .)
    COMP_OP         reduce using rule 15 (expression -> BOOL .)
    LET             reduce using rule 15 (expression -> BOOL .)
    IF              reduce using rule 15 (expression -> BOOL .)
    RETURN          reduce using rule 15 (expression -> BOOL .)
    $end            reduce using rule 15 (expression -> BOOL .)
    ELSE            reduce using rule 15 (expression -> BOOL .)
    RP              reduce using rule 15 (expression -> BOOL .)
    COMMA           reduce using rule 15 (expression -> BOOL .)


state 12

    (16) expression -> LP . expression RP
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 23
    comparison                     shift and go to state 7

state 13

    (2) program -> program statement .

    LET             reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    RETURN          reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)


state 14

    (8) expression -> expression PLUS . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 24
    comparison                     shift and go to state 7

state 15

    (9) expression -> expression MINUS . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 25
    comparison                     shift and go to state 7

state 16

    (10) expression -> expression TIMES . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 26
    comparison                     shift and go to state 7

state 17

    (11) expression -> expression DIVIDE . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 27
    comparison                     shift and go to state 7

state 18

    (18) comparison -> expression COMP_OP . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 28
    comparison                     shift and go to state 7

state 19

    (4) statement -> LET MNEUMONIC . BE expression

    BE              shift and go to state 29


state 20

    (5) statement -> IF comparison . COMMA THEN statement
    (6) statement -> IF comparison . COMMA THEN statement ELSE statement
    (17) expression -> comparison .

    COMMA           shift and go to state 30
    COMP_OP         reduce using rule 17 (expression -> comparison .)
    PLUS            reduce using rule 17 (expression -> comparison .)
    MINUS           reduce using rule 17 (expression -> comparison .)
    TIMES           reduce using rule 17 (expression -> comparison .)
    DIVIDE          reduce using rule 17 (expression -> comparison .)


state 21

    (18) comparison -> expression . COMP_OP expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    COMP_OP         shift and go to state 18
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 22

    (7) statement -> RETURN expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    LET             reduce using rule 7 (statement -> RETURN expression .)
    IF              reduce using rule 7 (statement -> RETURN expression .)
    RETURN          reduce using rule 7 (statement -> RETURN expression .)
    $end            reduce using rule 7 (statement -> RETURN expression .)
    ELSE            reduce using rule 7 (statement -> RETURN expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18


state 23

    (16) expression -> LP expression . RP
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    RP              shift and go to state 31
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18


state 24

    (8) expression -> expression PLUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    PLUS            reduce using rule 8 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 8 (expression -> expression PLUS expression .)
    LET             reduce using rule 8 (expression -> expression PLUS expression .)
    IF              reduce using rule 8 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 8 (expression -> expression PLUS expression .)
    $end            reduce using rule 8 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 8 (expression -> expression PLUS expression .)
    RP              reduce using rule 8 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 8 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18

  ! TIMES           [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! COMP_OP         [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 25

    (9) expression -> expression MINUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    PLUS            reduce using rule 9 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MINUS expression .)
    LET             reduce using rule 9 (expression -> expression MINUS expression .)
    IF              reduce using rule 9 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 9 (expression -> expression MINUS expression .)
    $end            reduce using rule 9 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 9 (expression -> expression MINUS expression .)
    RP              reduce using rule 9 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 9 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18

  ! TIMES           [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! COMP_OP         [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 26

    (10) expression -> expression TIMES expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    PLUS            reduce using rule 10 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 10 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 10 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 10 (expression -> expression TIMES expression .)
    LET             reduce using rule 10 (expression -> expression TIMES expression .)
    IF              reduce using rule 10 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 10 (expression -> expression TIMES expression .)
    $end            reduce using rule 10 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 10 (expression -> expression TIMES expression .)
    RP              reduce using rule 10 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 10 (expression -> expression TIMES expression .)
    COMP_OP         shift and go to state 18

  ! COMP_OP         [ reduce using rule 10 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 27

    (11) expression -> expression DIVIDE expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 11 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 11 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 11 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 11 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 11 (expression -> expression DIVIDE expression .)
    RP              reduce using rule 11 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 11 (expression -> expression DIVIDE expression .)
    COMP_OP         shift and go to state 18

  ! COMP_OP         [ reduce using rule 11 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 28

    (18) comparison -> expression COMP_OP expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    PLUS            reduce using rule 18 (comparison -> expression COMP_OP expression .)
    MINUS           reduce using rule 18 (comparison -> expression COMP_OP expression .)
    TIMES           reduce using rule 18 (comparison -> expression COMP_OP expression .)
    DIVIDE          reduce using rule 18 (comparison -> expression COMP_OP expression .)
    COMP_OP         reduce using rule 18 (comparison -> expression COMP_OP expression .)
    LET             reduce using rule 18 (comparison -> expression COMP_OP expression .)
    IF              reduce using rule 18 (comparison -> expression COMP_OP expression .)
    RETURN          reduce using rule 18 (comparison -> expression COMP_OP expression .)
    $end            reduce using rule 18 (comparison -> expression COMP_OP expression .)
    COMMA           reduce using rule 18 (comparison -> expression COMP_OP expression .)
    ELSE            reduce using rule 18 (comparison -> expression COMP_OP expression .)
    RP              reduce using rule 18 (comparison -> expression COMP_OP expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]
  ! COMP_OP         [ shift and go to state 18 ]


state 29

    (4) statement -> LET MNEUMONIC BE . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . NUMBER
    (13) expression -> . STRING
    (14) expression -> . MNEUMONIC
    (15) expression -> . BOOL
    (16) expression -> . LP expression RP
    (17) expression -> . comparison
    (18) comparison -> . expression COMP_OP expression

    NUMBER          shift and go to state 9
    STRING          shift and go to state 10
    MNEUMONIC       shift and go to state 5
    BOOL            shift and go to state 11
    LP              shift and go to state 12

    expression                     shift and go to state 32
    comparison                     shift and go to state 7

state 30

    (5) statement -> IF comparison COMMA . THEN statement
    (6) statement -> IF comparison COMMA . THEN statement ELSE statement

    THEN            shift and go to state 33


state 31

    (16) expression -> LP expression RP .

    PLUS            reduce using rule 16 (expression -> LP expression RP .)
    MINUS           reduce using rule 16 (expression -> LP expression RP .)
    TIMES           reduce using rule 16 (expression -> LP expression RP .)
    DIVIDE          reduce using rule 16 (expression -> LP expression RP .)
    COMP_OP         reduce using rule 16 (expression -> LP expression RP .)
    LET             reduce using rule 16 (expression -> LP expression RP .)
    IF              reduce using rule 16 (expression -> LP expression RP .)
    RETURN          reduce using rule 16 (expression -> LP expression RP .)
    $end            reduce using rule 16 (expression -> LP expression RP .)
    ELSE            reduce using rule 16 (expression -> LP expression RP .)
    RP              reduce using rule 16 (expression -> LP expression RP .)
    COMMA           reduce using rule 16 (expression -> LP expression RP .)


state 32

    (4) statement -> LET MNEUMONIC BE expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression
    (18) comparison -> expression . COMP_OP expression

    LET             reduce using rule 4 (statement -> LET MNEUMONIC BE expression .)
    IF              reduce using rule 4 (statement -> LET MNEUMONIC BE expression .)
    RETURN          reduce using rule 4 (statement -> LET MNEUMONIC BE expression .)
    $end            reduce using rule 4 (statement -> LET MNEUMONIC BE expression .)
    ELSE            reduce using rule 4 (statement -> LET MNEUMONIC BE expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17
    COMP_OP         shift and go to state 18


state 33

    (5) statement -> IF comparison COMMA THEN . statement
    (6) statement -> IF comparison COMMA THEN . statement ELSE statement
    (4) statement -> . LET MNEUMONIC BE expression
    (5) statement -> . IF comparison COMMA THEN statement
    (6) statement -> . IF comparison COMMA THEN statement ELSE statement
    (7) statement -> . RETURN expression

    LET             shift and go to state 4
    IF              shift and go to state 6
    RETURN          shift and go to state 8

    statement                      shift and go to state 34

state 34

    (5) statement -> IF comparison COMMA THEN statement .
    (6) statement -> IF comparison COMMA THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LET             reduce using rule 5 (statement -> IF comparison COMMA THEN statement .)
    IF              reduce using rule 5 (statement -> IF comparison COMMA THEN statement .)
    RETURN          reduce using rule 5 (statement -> IF comparison COMMA THEN statement .)
    $end            reduce using rule 5 (statement -> IF comparison COMMA THEN statement .)
    ELSE            shift and go to state 35

  ! ELSE            [ reduce using rule 5 (statement -> IF comparison COMMA THEN statement .) ]


state 35

    (6) statement -> IF comparison COMMA THEN statement ELSE . statement
    (4) statement -> . LET MNEUMONIC BE expression
    (5) statement -> . IF comparison COMMA THEN statement
    (6) statement -> . IF comparison COMMA THEN statement ELSE statement
    (7) statement -> . RETURN expression

    LET             shift and go to state 4
    IF              shift and go to state 6
    RETURN          shift and go to state 8

    statement                      shift and go to state 36

state 36

    (6) statement -> IF comparison COMMA THEN statement ELSE statement .

    LET             reduce using rule 6 (statement -> IF comparison COMMA THEN statement ELSE statement .)
    IF              reduce using rule 6 (statement -> IF comparison COMMA THEN statement ELSE statement .)
    RETURN          reduce using rule 6 (statement -> IF comparison COMMA THEN statement ELSE statement .)
    $end            reduce using rule 6 (statement -> IF comparison COMMA THEN statement ELSE statement .)
    ELSE            reduce using rule 6 (statement -> IF comparison COMMA THEN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 34 resolved as shift
